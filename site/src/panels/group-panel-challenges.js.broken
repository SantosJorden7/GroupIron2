/**
 * Group Challenges Panel
 * Custom element for tracking group challenges and goals
 */

import { BaseElement } from "../base-element/base-element.js";
import { pubsub } from "../data/pubsub.js";

class ChallengesPanel extends BaseElement {
  constructor() {
    super();
    this.challenges = [];
    this.loading = true;
    this.error = null;
    this.lastUpdated = null;
    this.selectedFilter = "active";
    this.dataSource = "plugin"; // Default data source
  }

  connectedCallback() {
    this.innerHTML = `
      <div class="panel-content challenges-panel">
        <div class="panel-header">üèÜ Group Challenges</div>
        <div class="panel-inner">
          <div class="challenges-header">
            <h3>Group Challenges</h3>
            <div class="data-source-indicator">
              <span class="data-source plugin" title="Data from RuneLite Plugin">P</span>
              <span class="data-source wom" title="Data from Wise Old Man API">W</span>
              <span class="data-source wiki" title="Data from OSRS Wiki">K</span>
              <span class="last-updated"></span>
            </div>
          </div>
          
          <div class="filter-controls">
            <button class="filter-button active" data-filter="active">Active</button>
            <button class="filter-button" data-filter="completed">Completed</button>
            <button class="filter-button" data-filter="expired">Expired</button>
            <button class="filter-button" data-filter="all">All</button>
          </div>
          
          <div class="challenges-list">
            <div class="loading-container">
              <div class="loading-text">Loading challenges...</div>
            </div>
          </div>
          
          <div class="error-container" style="display: none;">
            <div class="error-text"></div>
            <button class="retry-button">Retry</button>
          </div>
          
          <div class="challenges-actions">
            <button class="add-challenge-button">Add New Challenge</button>
          </div>
        </div>
      </div>
    `;

    // Apply styles
    this.applyStyles();
    
    // Subscribe to group data events
    this.unsubscribe = pubsub.subscribe("group-data-updated", () => {
      this.loadChallenges();
    });
    
    // Add event listeners
    this.addEventListener("click", this.handleClick.bind(this));
    
    // Initial data load
    this.loadChallenges();
  }

  disconnectedCallback() {
    // Cleanup subscription
    if (this.unsubscribe) {
      this.unsubscribe();
    }
    
    // Remove event listeners
    this.removeEventListener("click", this.handleClick);
  }

  applyStyles() {
    // Add CSS for the panel
    const style = document.createElement('style');
    style.textContent = `
      .challenges-panel {
        font-family: rssmall, 'RuneScape Small', sans-serif;
        color: var(--primary-text);
      }
      
      .panel-inner {
        padding: 12px;
      }
      
      /* Panel header styles */
      .challenges-panel .challenges-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
      }
      
      .challenges-panel h3 {
        margin: 0;
        font-family: rsbold, 'RuneScape Bold', sans-serif;
        color: var(--orange);
      }
      
      /* Data source indicators */
      .challenges-panel .data-source-indicator {
        display: flex;
        align-items: center;
        font-size: 12px;
      }
      
      .challenges-panel .data-source {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        margin-right: 4px;
        font-family: rsbold, 'RuneScape Bold', sans-serif;
        font-size: 12px;
      }
      
      .challenges-panel .data-source.plugin {
        background-color: #4a934a;
        color: white;
      }
      
      .challenges-panel .data-source.wom {
        background-color: #3a67a8;
        color: white;
      }
      
      .challenges-panel .data-source.wiki {
        background-color: #a83a3a;
        color: white;
      }
      
      .challenges-panel .last-updated {
        margin-left: 5px;
        font-size: 12px;
        opacity: 0.7;
      }
      
      /* Filter controls */
      .challenges-panel .filter-controls {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
        margin-bottom: 15px;
      }
      
      .challenges-panel .filter-button {
        background-color: var(--button-bg);
        border: 1px solid var(--button-border);
        color: var(--button-text);
        padding: 4px 10px;
        font-family: rssmall, 'RuneScape Small', sans-serif;
        font-size: 12px;
        cursor: pointer;
        border-radius: 2px;
      }
      
      .challenges-panel .filter-button:hover {
        background-color: var(--button-hover-bg);
      }
      
      .challenges-panel .filter-button.active {
        background-color: var(--orange);
        border-color: #a45e00;
        color: #000;
      }
      
      /* Loading state */
      .challenges-panel .loading-container {
        padding: 15px;
        text-align: center;
      }
      
      .challenges-panel .loading-text {
        position: relative;
        padding-left: 24px;
      }
      
      .challenges-panel .loading-text::before {
        content: "";
        position: absolute;
        left: 0;
        top: 50%;
        margin-top: -8px;
        width: 16px;
        height: 16px;
        border: 2px solid var(--orange);
        border-radius: 50%;
        border-top-color: transparent;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }
      
      /* Error state */
      .challenges-panel .error-container {
        background-color: rgba(168, 58, 58, 0.1);
        border: 1px solid rgba(168, 58, 58, 0.3);
        padding: 12px;
        margin: 10px 0;
        text-align: center;
        border-radius: 3px;
      }
      
      .challenges-panel .error-text {
        color: #a83a3a;
        margin-bottom: 8px;
      }
      
      .challenges-panel .retry-button {
        background-color: var(--button-bg);
        border: 1px solid var(--button-border);
        color: var(--button-text);
        padding: 3px 10px;
        font-family: rssmall, 'RuneScape Small', sans-serif;
        cursor: pointer;
      }
      
      /* Challenge items */
      .challenges-panel .challenges-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
      }
      
      .challenges-panel .challenge-item {
        background-color: rgba(0, 0, 0, 0.15);
        border: 1px solid var(--border-color);
        border-radius: 2px;
        overflow: hidden;
      }
      
      .challenges-panel .challenge-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--header-bg);
        padding: 8px 12px;
        border-bottom: 1px solid var(--border-color);
      }
      
      .challenges-panel .challenge-title {
        font-family: rsbold, 'RuneScape Bold', sans-serif;
        color: var(--header-text);
      }
      
      .challenges-panel .challenge-status {
        display: inline-block;
        padding: 2px 8px;
        border-radius: 10px;
        font-size: 11px;
        text-transform: uppercase;
      }
      
      .challenges-panel .status-active {
        background-color: #4a934a;
        color: white;
      }
      
      .challenges-panel .status-completed {
        background-color: #3a67a8;
        color: white;
      }
      
      .challenges-panel .status-expired {
        background-color: #a83a3a;
        color: white;
      }
      
      .challenges-panel .challenge-content {
        padding: 12px;
      }
      
      .challenges-panel .challenge-description {
        margin-bottom: 8px;
        font-size: 14px;
      }
      
      .challenges-panel .challenge-meta {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        font-size: 12px;
        margin-bottom: 8px;
        color: var(--secondary-text);
      }
      
      .challenges-panel .challenge-creator {
        margin-right: 10px;
      }
      
      .challenges-panel .challenge-dates > div {
        margin-bottom: 2px;
      }
      
      .challenges-panel .challenge-reward {
        margin-top: 8px;
        font-size: 13px;
        color: var(--orange);
      }
      
      .challenges-panel .challenge-actions {
        display: flex;
        padding: 8px 12px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        justify-content: flex-end;
      }
      
      .challenges-panel .complete-button {
        background-color: #305830;
        border: 1px solid #254025;
        color: white;
        padding: 4px 12px;
        font-family: rssmall, 'RuneScape Small', sans-serif;
        font-size: 12px;
        cursor: pointer;
        border-radius: 2px;
      }
      
      .challenges-panel .complete-button:hover {
        background-color: #3a6a3a;
      }
      
      /* Add challenge button */
      .challenges-panel .challenges-actions {
        display: flex;
        justify-content: center;
        margin-top: 15px;
      }
      
      .challenges-panel .add-challenge-button {
        background-color: var(--button-bg);
        border: 1px solid var(--button-border);
        color: var(--button-text);
        padding: 6px 15px;
        font-family: rssmall, 'RuneScape Small', sans-serif;
        cursor: pointer;
        border-radius: 2px;
      }
      
      .challenges-panel .add-challenge-button:hover {
        background-color: var(--button-hover-bg);
      }
      
      /* Empty state */
      .challenges-panel .empty-state {
        padding: 20px;
        text-align: center;
        color: var(--secondary-text);
      }
    `;
    this.appendChild(style);
  }

  handleClick(event) {
    const target = event.target;
    
    // Handle filter buttons
    if (target.classList.contains("filter-button")) {
      const filter = target.dataset.filter;
      this.filterChallenges(filter);
    }
    
    // Handle retry button
    if (target.classList.contains("retry-button")) {
      this.loadChallenges();
    }
    
    // Handle add challenge button
    if (target.classList.contains("add-challenge-button")) {
      this.showAddChallengeForm();
    }
    
    // Handle complete challenge button
    if (target.classList.contains("complete-button")) {
      const challengeId = target.closest(".challenge-item").dataset.challengeId;
      this.completeChallenge(challengeId);
    }
  }

  loadChallenges() {
    this.loading = true;
    this.updateDisplay();
    
    // Try to get data from plugin first (P)
    if (window.plugin && window.plugin.groupChallenges) {
      try {
        const pluginChallenges = window.plugin.groupChallenges.getChallenges();
        if (pluginChallenges && pluginChallenges.length > 0) {
          this.challenges = pluginChallenges;
          this.dataSource = "plugin";
          this.loading = false;
          this.error = null;
          this.lastUpdated = new Date();
          this.updateDisplay();
          return;
        }
      } catch (err) {
        console.warn("Failed to load challenges from plugin:", err);
        // Continue to fallback
      }
    }
    
    // Fallback to Wise Old Man API (W)
    this.tryWiseOldManChallenges();
  }

  tryWiseOldManChallenges() {
    // Check if WOM service is available
    if (window.wiseOldManService) {
      try {
        window.wiseOldManService.getGroupChallenges()
          .then(womChallenges => {
            if (womChallenges && womChallenges.length > 0) {
              this.challenges = womChallenges;
              this.dataSource = "wiseOldMan";
              this.loading = false;
              this.error = null;
              this.dataSource = "wom";
              this.lastUpdated = new Date();
              this.updateDisplay();
              
              // Update data source indicators
              this.updateDataSourceIndicators();
            } else {
              throw new Error("Invalid response format from WOM API");
            }
          })
          .catch(error => {
            console.error("Error fetching challenges from WOM:", error);
            this.dataSource = "wom-failed";
            this.tryWikiChallenges();
          });
      } catch (error) {
        console.error("Error processing WOM challenges:", error);
        this.dataSource = "wom-failed";
        this.tryWikiChallenges();
      }
    } else {
      // WOM API not available, fall back to Wiki
      console.log("WOM API not available, falling back to Wiki");
      this.dataSource = "wom-failed";
      this.tryWikiChallenges();

      tryWikiChallenges() {
        // Check if Wiki service is available
        if (window.wikiService && typeof window.wikiService.getGroupChallenges === 'function') {
          try {
            console.log("Attempting to fetch challenges from Wiki service");
            window.wikiService.getGroupChallenges()
              .then(wikiChallenges => {
                if (wikiChallenges && Array.isArray(wikiChallenges) && wikiChallenges.length > 0) {
                  // Transform Wiki data to our format if needed
                  this.challenges = wikiChallenges.map(wikiChallenge => ({
                    id: wikiChallenge.id || `wiki-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                    title: wikiChallenge.title || wikiChallenge.name || 'Unnamed Challenge',
                    description: wikiChallenge.description || '',
                    createdBy: wikiChallenge.createdBy || 'Wiki',
                    createdAt: wikiChallenge.createdAt || new Date().toISOString(),
                    deadline: wikiChallenge.deadline || null,
                    status: wikiChallenge.status || 'active',
                    completedBy: wikiChallenge.completedBy || null,
                    completedAt: wikiChallenge.completedAt || null,
                    reward: wikiChallenge.reward || null,
                  }));
                  
                  this.dataSource = "wiki";
                  this.loading = false;
                  this.error = null;
                  this.lastUpdated = new Date();
                  this.updateDisplay();
                  this.updateDataSourceIndicators();
                } else {
                  console.log("No valid challenge data from Wiki, using mock data");
                  this.useMockData();
                }
              })
              .catch(err => {
                console.warn("Failed to load challenges from Wiki:", err);
                this.useMockData();
              });
          } catch (err) {
            console.warn("Error processing Wiki challenges:", err);
            this.useMockData();
            id: "1",
            title: "Fire Cape Race",
            description: "First group member to obtain a Fire Cape",
            createdBy: "Player1",
            createdAt: new Date(Date.now() - 1000 * 60 * 60 * 48).toISOString(), // 2 days ago
            deadline: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7).toISOString(), // 7 days from now
            status: "active",
            completedBy: null,
            completedAt: null,
            reward: "10M GP from group fund"
          },
          {
            id: "2",
            title: "Level 80 Slayer",
            description: "All group members reach level 80 in Slayer",
            createdBy: "Player2",
            createdAt: new Date(Date.now() - 1000 * 60 * 60 * 72).toISOString(), // 3 days ago
            deadline: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30).toISOString(), // 30 days from now
            status: "active",
            completedBy: null,
            completedAt: null,
            reward: "Shared Abyssal whip"
          },
          {
            id: "3",
            title: "GWD Equipment",
            description: "Obtain one complete set of godwars dungeon armor",
            createdBy: "Player3",
            createdAt: new Date(Date.now() - 1000 * 60 * 60 * 120).toISOString(), // 5 days ago
            deadline: null, // No deadline
            status: "active",
            completedBy: null,
            completedAt: null,
            reward: null
          },
          {
            id: "4",
            title: "Barrows Gloves",
            description: "All group members obtain Barrows gloves",
            createdBy: "Player1",
            createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10).toISOString(), // 10 days ago
            deadline: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(), // 2 days ago (expired)
            status: "expired",
            completedBy: null,
            completedAt: null,
            reward: "Group cooking supplies"
          },
          {
            id: "5",
            title: "Group Bossing Day",
            description: "All members participate in a 3-hour GWD bossing session",
            createdBy: "Player2",
            createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 14).toISOString(), // 14 days ago
            deadline: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(), // 7 days ago
            status: "completed",
            completedBy: "Group",
            completedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(), // 7 days ago
            reward: "Drop splits"
          }
        ];
        
        this.dataSource = "wiki"; // Show as Wiki source since it's our fallback
        this.loading = false;
        this.error = null;
        this.lastUpdated = new Date();
      } catch (error) {
        this.loading = false;
        this.error = error.message || "Failed to load challenges";
      }
      
      this.updateDisplay();
    }, 1000);
  }

  filterChallenges(filter) {
    this.selectedFilter = filter || "active";
    
    // Set active class on the selected filter button
    const filterButtons = this.querySelectorAll(".filter-button");
    filterButtons.forEach(button => {
      if (button.dataset.filter === this.selectedFilter) {
        button.classList.add("active");
      } else {
        button.classList.remove("active");
      }
    });
    
    // Update the displayed challenges
    this.updateDisplay();
  }

  updateDisplay() {
    // Update data source badges
    const pluginBadge = this.querySelector(".data-source.plugin");
    const womBadge = this.querySelector(".data-source.wom");
    const wikiBadge = this.querySelector(".data-source.wiki");
    
    if (pluginBadge) {
      pluginBadge.style.opacity = this.dataSource === "plugin" ? "1" : "0.3";
    }
    
    if (womBadge) {
      womBadge.style.opacity = this.dataSource === "wiseOldMan" ? "1" : "0.3";
    }
    
    if (wikiBadge) {
      wikiBadge.style.opacity = this.dataSource === "wiki" ? "1" : "0.3";
    }
    
    // Update last updated text
    const lastUpdatedElem = this.querySelector(".last-updated");
    if (lastUpdatedElem) {
      lastUpdatedElem.textContent = this.lastUpdated 
        ? `Last updated: ${this.lastUpdated.toLocaleTimeString()}`
        : "Not yet updated";
    }
    
    // Show/hide loading
    const loadingElem = this.querySelector(".loading-container");
    if (loadingElem) {
      loadingElem.style.display = this.loading ? "block" : "none";
    }
    
    // Show error if any
    const errorElem = this.querySelector(".error-container");
    if (errorElem) {
      if (this.error) {
        errorElem.style.display = "block";
        const errorTextElem = errorElem.querySelector(".error-text");
        if (errorTextElem) {
          errorTextElem.textContent = this.error;
        }
      } else {
        errorElem.style.display = "none";
      }
    }
    
    // Update challenges list
    const challengesListElem = this.querySelector(".challenges-list");
    if (challengesListElem && !this.loading && !this.error) {
      // Filter challenges based on selected filter
      let filteredChallenges = this.challenges;
      if (this.selectedFilter !== "all") {
        filteredChallenges = this.challenges.filter(
          challenge => challenge.status === this.selectedFilter
        );
      }
      
      if (filteredChallenges.length === 0) {
        challengesListElem.innerHTML = `
          <div class="empty-state">
            <p>No challenges found${this.selectedFilter !== "all" ? " for this filter" : ""}.</p>
          </div>
        `;
      } else {
        let challengesHtml = "";
        
        filteredChallenges.forEach(challenge => {
          const deadlineDate = challenge.deadline ? new Date(challenge.deadline) : null;
          const createdDate = new Date(challenge.createdAt);
          const completedDate = challenge.completedAt ? new Date(challenge.completedAt) : null;
          
          const deadlineStr = deadlineDate 
            ? deadlineDate < new Date() 
              ? `Expired: ${deadlineDate.toLocaleDateString()}`
              : `Deadline: ${deadlineDate.toLocaleDateString()}`
            : "No deadline";
          
          const statusBadgeClass = 
            challenge.status === "active" ? "status-active" :
            challenge.status === "completed" ? "status-completed" :
            "status-expired";
          
          challengesHtml += `
            <div class="challenge-item" data-challenge-id="${challenge.id}" data-status="${challenge.status}">
              <div class="challenge-header">
                <span class="challenge-title">${challenge.title}</span>
                <span class="challenge-status ${statusBadgeClass}">${challenge.status}</span>
              </div>
              <div class="challenge-content">
                <div class="challenge-description">${challenge.description}</div>
                <div class="challenge-meta">
                  <div class="challenge-creator">Created by: ${challenge.createdBy}</div>
                  <div class="challenge-dates">
                    <div>Created: ${createdDate.toLocaleDateString()}</div>
                    <div>${deadlineStr}</div>
                    ${completedDate ? `<div>Completed: ${completedDate.toLocaleDateString()}</div>` : ''}
                  </div>
                </div>
                ${challenge.reward ? `<div class="challenge-reward">Reward: ${challenge.reward}</div>` : ''}
              </div>
              ${challenge.status === "active" ? `
                <div class="challenge-actions">
                  <button class="complete-button" data-challenge-id="${challenge.id}">Complete</button>
                </div>
              ` : ''}
            </div>
          `;
        });
        
        challengesListElem.innerHTML = challengesHtml;
      }
    }
  }

  showAddChallengeForm() {
    alert("Add challenge functionality would be implemented here");
  }

  completeChallenge(challengeId) {
    const challengeIndex = this.challenges.findIndex(c => c.id === challengeId);
    if (challengeIndex !== -1) {
      this.challenges[challengeIndex].status = "completed";
      this.challenges[challengeIndex].completedBy = "Current player"; // Would use actual player name
      this.challenges[challengeIndex].completedAt = new Date().toISOString();
      this.updateDisplay();
    }
  }
}

// Register with the correct naming convention
window.customElements.define('group-panel-challenges', ChallengesPanel);
